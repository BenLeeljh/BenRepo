<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://code.alibabatech.com/schema/dubbo 
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
<!--配置静态资源 css js img不由前端控制器处理  -->
    <mvc:default-servlet-handler/>
	<!-- 配置@Controller注解扫描 -->
	<context:component-scan base-package="cn.itheima.crm.controller"></context:component-scan>

	<!-- 如果没有显示的配置处理器映射器和处理器适配那么springMvc会去默认的dispatcherServlet.properties中查找, 
		对应的处理器映射器和处理器适配器去使用,这样每个请求都要扫描一次他的默认配置文件,效率非常低,会降低访问速度,所以要显示的配置处理器映射器和 处理器适配器 -->

	<!-- 注解形式的处理器映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean> -->
	<!-- 注解形式的处理器适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"></bean> -->

	<!-- 配置最新版的注解的处理器映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean> -->
	<!-- 配置最新版的注解的处理器适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean> -->

	<!-- 注解驱动: 作用:替我们自动配置最新版的注解的处理器映射器和处理器适配器 企业中推荐使用这种方法 -->
	<mvc:annotation-driven></mvc:annotation-driven>


	<!--注解驱动方式：配置处理器映射器，处理器适配器 -->
<!-- 	<mvc:annotation-driven conversion-service="conversionService" />

	配置转换器conversionService
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="cn.itheima.ssm.converter.DateConverter" />
			</set>
		</property>
	</bean>

	配置自定义异常处理器
	<bean class="cn.itheima.ssm.exception.MyHandlerExceptionResolver"></bean>

	配置上传解析器 1.文件上传解析器Id，必须是MultipartResolver接口的首字母小写

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		Provides "maxUploadSize", "maxInMemorySize" and "defaultEncoding" 
			settings as * bean properties
		maxUploadSize属性
		<property name="maxUploadSize" value="10485760"></property>
		设置内存缓存大小，以字节为单位
		<property name="maxInMemorySize" value="4096"></property>
		指定默认字符编码:utf-8
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	配置拦截器
	<mvc:interceptors>
		<mvc:interceptor>
			配置拦截的url，说明： 1.配置拦截单个url：/interceptor.do，表示拦截请求/interceptor.do 2.配置拦截多个url：/inter/**，表示拦截以/inter开头的所有请求
			<mvc:mapping path="/interceptor.action" />
			<bean class="cn.itheima.ssm.interceptor.FirstHandlerInterceptor"></bean>

		</mvc:interceptor>

		配置登录拦截器
		<mvc:interceptor>
			<mvc:mapping path="/queryItem.action" />
			<bean class="cn.itheima.ssm.interceptor.LoginInterceptor">
			</bean>
		</mvc:interceptor>
	</mvc:interceptors> -->




	<!-- 配置视图解析器 作用:在controller中指定页面路径的时候就不用写页面的完整路径名称了,可以直接写页面去掉扩展名的名称 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 真正的页面路径 = 前缀 + 去掉后缀名的页面名称 + 后缀 -->
		<!-- 前缀 -->
		<property name="prefix" value="/WEB-INF/views/"></property>
		<!-- 后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>



</beans>







